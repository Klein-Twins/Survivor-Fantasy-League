RefreshTokenExpiresIn:
  get:
    summary: Retrieve remaining validity of the refresh token
    operationId: getRefreshTokenExpiresIn
    description: |
      This endpoint is used by the front-end to determine how much time (in seconds) 
      remains before the refresh token expires. The refresh token must be passed 
      in the request as a cookie, and the associated profile ID must be provided 
      as a query parameter.
    tags:
      - Token
    parameters:
      - $ref: "../components/securityComponents.yaml#/components/parameters/ProfileId"
    responses:
      "200":
        description: Refresh token validity retrieved successfully.
        content:
          application/json:
            schema:
              $ref: "../components/tokenComponents.yaml#/components/schemas/GetRefreshTokenExpiresInResponseSuccess"

      "401":
        description: Unauthorized Error
        content:
          application/json:
            schema:
              $ref: "../components/errorComponents.yaml#/components/schemas/UnauthorizedError"
            examples:
              UnauthorizedError:
                $ref: "../components/errorComponents.yaml#/components/examples/UnauthorizedError"

      "500":
        $ref: "../components/errorComponents.yaml#/components/responses/InternalServerError"
    security:
      - refreshTokenCookie: []

CheckAuth:
  get:
    summary: Validate refresh token authenticity
    operationId: checkAuth
    description: |
      This endpoint verifies if the refresh token is valid. It is used to confirm 
      the user's authentication status, such as during a page reload. Requires the 
      refresh token cookie and the associated profile ID as input.
    tags:
      - Token
    parameters:
      - $ref: "../components/securityComponents.yaml#/components/parameters/ProfileId"
    responses:
      "200":
        description: User authentication status retrieved successfully.
        content:
          application/json:
            schema:
              $ref: "../components/tokenComponents.yaml#/components/schemas/CheckAuthResponseSuccess"

      "401":
        description: Unauthorized Error
        content:
          application/json:
            schema:
              $ref: "../components/errorComponents.yaml#/components/schemas/UnauthorizedError"
            examples:
              UnauthorizedError:
                $ref: "../components/errorComponents.yaml#/components/examples/UnauthorizedError"

      "500":
        $ref: "../components/errorComponents.yaml#/components/responses/InternalServerError"
    security:
      - refreshTokenCookie: []

ExtendSession:
  post:
    summary: Extend user session
    operationId: extendSession
    description: |
      Extends the user session by generating a new refresh token and access token, 
      if the refresh token is valid. The response includes both tokens set as cookies 
      and a time-to-expiry value for the refresh token.
    tags:
      - Token
    parameters:
      - $ref: "../components/securityComponents.yaml#/components/parameters/ProfileId"
    responses:
      "200":
        description: User session extended successfully.
        content:
          application/json:
            schema:
              $ref: "../components/tokenComponents.yaml#/components/schemas/ExtendSessionResponseSuccess"
        headers:
          Set-Cookie:
            $ref: "../components/securityComponents.yaml#/components/headers/AuthCookies"

      "401":
        description: Unauthorized Error
        content:
          application/json:
            schema:
              $ref: "../components/errorComponents.yaml#/components/schemas/UnauthorizedError"
            examples:
              UnauthorizedError:
                $ref: "../components/errorComponents.yaml#/components/examples/UnauthorizedError"

      "500":
        $ref: "../components/errorComponents.yaml#/components/responses/InternalServerError"
    security:
      - refreshTokenCookie: []
