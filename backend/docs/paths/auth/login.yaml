paths:
  login:
    post:
      operationId: loginUser
      summary: 'Login a user'
      description: >-
        Logs in a user by validating their credentials. Upon success: - Access
        and refresh tokens are set in `Set-Cookie` headers. - A success message
        and account details are returned in the response body.
      tags:
        - UserSessionService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/LoginUserRequestBody'
      responses:
        '200':
          description: 'User logged in successfully'
          headers:
            Set-Cookie:
              $ref: '../../components/common/security.yaml#/components/headers/AuthCookies'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/LoginUserResponse'

components:
  schemas:
    LoginUserResponseData:
      type: object
      required:
        - account
        - userSession
      properties:
        account:
          $ref: '../../components/user/account.yaml#/components/schemas/Account'
        userSession:
          $ref: '../../components/user/userSession.yaml#/components/schemas/UserSession'
  responses:
    LoginUserResponse:
      type: object
      allOf:
        - $ref: '../../components/common/api.yaml#/components/schemas/ApiResponse'
        - type: object
          properties:
            responseData:
              $ref: '#/components/schemas/LoginUserResponseData'
  requestBodies:
    LoginUserRequestBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
        password:
          type: string
          format: password
          description: Password for the user account
          minLength: 8
          example: StrongPassword123!
