openapi: 3.0.0
info:
  title: Survivor Fantasy League API
  version: 1.0.0
  description: API Documentation for the Survivor Fantasy League application
servers:
  - url: http://localhost:3000/api
tags:
  - name: Authentication
    description: Endpoints related to user authentication and registration
paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: Creates a new User account with a provided email, username, and password.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
              schema:
                  type: object
                  required:
                      - email
                      - password
                      - username
                  properties:
                      email:
                          type: string
                          example: user@example.com
                      password:
                          type: string
                          example: StrongPassword123
                      username:
                          type: string
                          example: SurvivorFan69
                      firstName:
                          type: string
                          example: Jeff
                      lastName:
                          type: string
                          example: Probst
      responses:
        201:
          description: Created - User created successfully
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          message:
                              type: string
                              example: "User created successfully"
                          user:
                              type: object
                              properties:
                                  username:
                                      type: string
                                      example: "SurvivorFan69"
                                  token:
                                      type: string
                                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJuYW1lIjoiU3Vydml...
                                  userProfileId:
                                      type: integer
                                      example: 123456433
        400:
          description: Bad request - No email provided | No username provided | No password provided | Username is unavailable | Email is unavailable | User password is not strong enough | Email is invalid
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          message:
                              type: string
                              enum:
                                  - Bad Request - No email provided
                                  - Bad Request - No username provided
                                  - Bad Request - No password provided
                                  - Bad Request - Username is unavailable
                                  - Bad Request - Email is unavailable
                                  - Bad Request - User password is not strong enough
                                  - Bad Request - Email is invalid
        500:
          description: Internal Server Error - Failed to sign up and create user
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          message:
                              type: string
                              example: Internal Server Error - Failed to sign up and create user
  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user with email and password.
      tags:
          - Authentication
      requestBody:
          required: true
          content:
              application/json:
                  schema:
                      type: object
                      required:
                          - email
                          - password
                      properties:
                          email:
                              type: string
                              example: user@example.com
                          password:
                              type: string
                              example: StrongPassword123
      responses:
          200:
              description: OK - User authenticated successfully
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: "User authenticated successfully"
                              user:
                                  type: object
                                  properties:
                                      username:
                                          type: string
                                          example: "SurvivorFan69"
                                      token:
                                          type: string
                                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InVzZXJuYW1lIjoiU3Vydml...
                                      userProfileId:
                                          type: integer
                                          example: 535c5e40-a4bb-4b9b-b6d8-289e8e813b83
          404:
              description: Not Found - Email is not tied to a registered user
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Not Found - Email is not tied to a registered user
          401:
              description: Unauthorized - password invalid
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Unauthorized - password invalid
          400:
              description: Bad Request - Email is invalid | No email provided | No password provided
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  enum:
                                      - Bad Request - Email is invalid
                                      - Bad Request - No email provided
                                      - Bad Request - No password provided
          500:
              description: Internal Server Error - Failed to login user
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Internal Server Error - Failed to login user
  /api/auth/changePassword:
   post:
      summary: Change a logged in user's password
      description: Changes a logged in user's password
      tags:
          - Authentication
      requestBody:
          required: true
          content:
              application/json:
                  schema:
                      type: object
                      required:
                          - email
                          - oldPassword
                          - newPassword
                      properties:
                          email:
                              type: string
                              example: user@example.com
                          oldPassword:
                              type: string
                              example: StrongPassword123
                          newPassword:
                              type: string
                              example: NewStrongPassword123
      responses:
          200:
              description: OK - User password updated successfully
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: "User password changed successfully"
          401:
              description: Unauthorized - Old password invalid
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Unauthorized - password invalid
          404:
              description: Not Found - Email is not tied to a registered user
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Not Found - Email is not tied to a registered user
          400:
              description: Bad request - No email provided | No old password provided | No new password provided | New password is not strong enough | Email is invalid
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  enum:
                                      - Bad Request - No email provided
                                      - Bad Request - No old password provided
                                      - Bad Request - No new password provided
                                      - Bad Request - New password is not strong enough
                                      - Bad Request - Email is invalid
          500:
              description: Internal Server Error - Failed to update password
              content:
                  application/json:
                      schema:
                          type: object
                          properties:
                              message:
                                  type: string
                                  example: Internal Server Error - Failed to update password