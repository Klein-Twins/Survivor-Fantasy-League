/* tslint:disable */
/* eslint-disable */
/**
 * Survivor Fantasy League - OpenAPI 3.0.3
 * This is the Survivor Fantasy League Spec for API's
 *
 * OpenAPI spec version: 1.0.11
 * Contact: pklein111697@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateSeasonResponse } from '../models';
import { GetSeasonsResponse } from '../models';
/**
 * SeasonServiceApi - axios parameter creator
 * @export
 */
export const SeasonServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new season.
         * @summary Create a season
         * @param {number} seasonNumber 
         * @param {boolean} isActive 
         * @param {string} theme 
         * @param {string} location 
         * @param {string} name 
         * @param {number} numberOfContestants 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {Blob} seasonLogo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSeasonForm: async (seasonNumber: number, isActive: boolean, theme: string, location: string, name: string, numberOfContestants: number, startDate: string, endDate: string, seasonLogo: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonNumber' is not null or undefined
            if (seasonNumber === null || seasonNumber === undefined) {
                throw new RequiredError('seasonNumber','Required parameter seasonNumber was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'isActive' is not null or undefined
            if (isActive === null || isActive === undefined) {
                throw new RequiredError('isActive','Required parameter isActive was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'theme' is not null or undefined
            if (theme === null || theme === undefined) {
                throw new RequiredError('theme','Required parameter theme was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'location' is not null or undefined
            if (location === null || location === undefined) {
                throw new RequiredError('location','Required parameter location was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'numberOfContestants' is not null or undefined
            if (numberOfContestants === null || numberOfContestants === undefined) {
                throw new RequiredError('numberOfContestants','Required parameter numberOfContestants was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling createSeasonForm.');
            }
            // verify required parameter 'seasonLogo' is not null or undefined
            if (seasonLogo === null || seasonLogo === undefined) {
                throw new RequiredError('seasonLogo','Required parameter seasonLogo was null or undefined when calling createSeasonForm.');
            }
            const localVarPath = `/api/admin/season`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (seasonNumber !== undefined) { 
                localVarFormParams.append('seasonNumber', seasonNumber as any);
            }

            if (isActive !== undefined) { 
                localVarFormParams.append('isActive', isActive as any);
            }

            if (theme !== undefined) { 
                localVarFormParams.append('theme', theme as any);
            }

            if (location !== undefined) { 
                localVarFormParams.append('location', location as any);
            }

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (numberOfContestants !== undefined) { 
                localVarFormParams.append('numberOfContestants', numberOfContestants as any);
            }

            if (startDate !== undefined) { 
                localVarFormParams.append('startDate', startDate as any);
            }

            if (endDate !== undefined) { 
                localVarFormParams.append('endDate', endDate as any);
            }

            if (seasonLogo !== undefined) { 
                localVarFormParams.append('seasonLogo', seasonLogo as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific season by ID.
         * @summary Get seasons by ID
         * @param {number} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonById: async (seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling getSeasonById.');
            }
            const localVarPath = `/api/admin/season/{seasonId}`
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of seasons. Optionally, filter by season ID.
         * @summary Get seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasons: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/season`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonServiceApi - functional programming interface
 * @export
 */
export const SeasonServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new season.
         * @summary Create a season
         * @param {number} seasonNumber 
         * @param {boolean} isActive 
         * @param {string} theme 
         * @param {string} location 
         * @param {string} name 
         * @param {number} numberOfContestants 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {Blob} seasonLogo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeasonForm(seasonNumber: number, isActive: boolean, theme: string, location: string, name: string, numberOfContestants: number, startDate: string, endDate: string, seasonLogo: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateSeasonResponse>>> {
            const localVarAxiosArgs = await SeasonServiceApiAxiosParamCreator(configuration).createSeasonForm(seasonNumber, isActive, theme, location, name, numberOfContestants, startDate, endDate, seasonLogo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a specific season by ID.
         * @summary Get seasons by ID
         * @param {number} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonById(seasonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetSeasonsResponse>>> {
            const localVarAxiosArgs = await SeasonServiceApiAxiosParamCreator(configuration).getSeasonById(seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of seasons. Optionally, filter by season ID.
         * @summary Get seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasons(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetSeasonsResponse>>> {
            const localVarAxiosArgs = await SeasonServiceApiAxiosParamCreator(configuration).getSeasons(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SeasonServiceApi - factory interface
 * @export
 */
export const SeasonServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new season.
         * @summary Create a season
         * @param {number} seasonNumber 
         * @param {boolean} isActive 
         * @param {string} theme 
         * @param {string} location 
         * @param {string} name 
         * @param {number} numberOfContestants 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {Blob} seasonLogo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSeasonForm(seasonNumber: number, isActive: boolean, theme: string, location: string, name: string, numberOfContestants: number, startDate: string, endDate: string, seasonLogo: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateSeasonResponse>> {
            return SeasonServiceApiFp(configuration).createSeasonForm(seasonNumber, isActive, theme, location, name, numberOfContestants, startDate, endDate, seasonLogo, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific season by ID.
         * @summary Get seasons by ID
         * @param {number} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonById(seasonId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSeasonsResponse>> {
            return SeasonServiceApiFp(configuration).getSeasonById(seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of seasons. Optionally, filter by season ID.
         * @summary Get seasons
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasons(options?: AxiosRequestConfig): Promise<AxiosResponse<GetSeasonsResponse>> {
            return SeasonServiceApiFp(configuration).getSeasons(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonServiceApi - object-oriented interface
 * @export
 * @class SeasonServiceApi
 * @extends {BaseAPI}
 */
export class SeasonServiceApi extends BaseAPI {
    /**
     * Creates a new season.
     * @summary Create a season
     * @param {number} seasonNumber 
     * @param {boolean} isActive 
     * @param {string} theme 
     * @param {string} location 
     * @param {string} name 
     * @param {number} numberOfContestants 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {Blob} seasonLogo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonServiceApi
     */
    public async createSeasonForm(seasonNumber: number, isActive: boolean, theme: string, location: string, name: string, numberOfContestants: number, startDate: string, endDate: string, seasonLogo: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateSeasonResponse>> {
        return SeasonServiceApiFp(this.configuration).createSeasonForm(seasonNumber, isActive, theme, location, name, numberOfContestants, startDate, endDate, seasonLogo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a specific season by ID.
     * @summary Get seasons by ID
     * @param {number} seasonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonServiceApi
     */
    public async getSeasonById(seasonId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetSeasonsResponse>> {
        return SeasonServiceApiFp(this.configuration).getSeasonById(seasonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of seasons. Optionally, filter by season ID.
     * @summary Get seasons
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonServiceApi
     */
    public async getSeasons(options?: AxiosRequestConfig) : Promise<AxiosResponse<GetSeasonsResponse>> {
        return SeasonServiceApiFp(this.configuration).getSeasons(options).then((request) => request(this.axios, this.basePath));
    }
}
