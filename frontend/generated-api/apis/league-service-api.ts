/* tslint:disable */
/* eslint-disable */
/**
 * Survivor Fantasy League - OpenAPI 3.0.3
 * This is the Survivor Fantasy League Spec for API's
 *
 * OpenAPI spec version: 1.0.11
 * Contact: pklein111697@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateLeagueRequestBody } from '../models';
import { CreateLeagueResponse } from '../models';
import { GetLeaguesResponse } from '../models';
/**
 * LeagueServiceApi - axios parameter creator
 * @export
 */
export const LeagueServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new league for a given season.
         * @summary Create a new League
         * @param {CreateLeagueRequestBody} body 
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLeague: async (body: CreateLeagueRequestBody, profileId: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLeague.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling createLeague.');
            }
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling createLeague.');
            }
            const localVarPath = `/api/league/{profileId}/{seasonId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessTokenCookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("accessToken")
                    : await configuration.apiKey;
                localVarQueryParameter["accessToken"] = localVarApiKeyValue;
            }

            // authentication refreshTokenCookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("refreshToken")
                    : await configuration.apiKey;
                localVarQueryParameter["refreshToken"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets profile's enrolled leagues
         * @summary Get leagues for a profile
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeagues: async (profileId: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling getLeagues.');
            }
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling getLeagues.');
            }
            const localVarPath = `/api/league/{profileId}/{seasonId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessTokenCookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("accessToken")
                    : await configuration.apiKey;
                localVarQueryParameter["accessToken"] = localVarApiKeyValue;
            }

            // authentication refreshTokenCookie required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("refreshToken")
                    : await configuration.apiKey;
                localVarQueryParameter["refreshToken"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeagueServiceApi - functional programming interface
 * @export
 */
export const LeagueServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new league for a given season.
         * @summary Create a new League
         * @param {CreateLeagueRequestBody} body 
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLeague(body: CreateLeagueRequestBody, profileId: string, seasonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateLeagueResponse>>> {
            const localVarAxiosArgs = await LeagueServiceApiAxiosParamCreator(configuration).createLeague(body, profileId, seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets profile's enrolled leagues
         * @summary Get leagues for a profile
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeagues(profileId: string, seasonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetLeaguesResponse>>> {
            const localVarAxiosArgs = await LeagueServiceApiAxiosParamCreator(configuration).getLeagues(profileId, seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LeagueServiceApi - factory interface
 * @export
 */
export const LeagueServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new league for a given season.
         * @summary Create a new League
         * @param {CreateLeagueRequestBody} body 
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLeague(body: CreateLeagueRequestBody, profileId: string, seasonId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateLeagueResponse>> {
            return LeagueServiceApiFp(configuration).createLeague(body, profileId, seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets profile's enrolled leagues
         * @summary Get leagues for a profile
         * @param {string} profileId Profile Id for the getLeaguesQuery
         * @param {number} seasonId Season Id for the getLeaguesQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeagues(profileId: string, seasonId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<GetLeaguesResponse>> {
            return LeagueServiceApiFp(configuration).getLeagues(profileId, seasonId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeagueServiceApi - object-oriented interface
 * @export
 * @class LeagueServiceApi
 * @extends {BaseAPI}
 */
export class LeagueServiceApi extends BaseAPI {
    /**
     * Creates a new league for a given season.
     * @summary Create a new League
     * @param {CreateLeagueRequestBody} body 
     * @param {string} profileId Profile Id for the getLeaguesQuery
     * @param {number} seasonId Season Id for the getLeaguesQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueServiceApi
     */
    public async createLeague(body: CreateLeagueRequestBody, profileId: string, seasonId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateLeagueResponse>> {
        return LeagueServiceApiFp(this.configuration).createLeague(body, profileId, seasonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets profile's enrolled leagues
     * @summary Get leagues for a profile
     * @param {string} profileId Profile Id for the getLeaguesQuery
     * @param {number} seasonId Season Id for the getLeaguesQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeagueServiceApi
     */
    public async getLeagues(profileId: string, seasonId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<GetLeaguesResponse>> {
        return LeagueServiceApiFp(this.configuration).getLeagues(profileId, seasonId, options).then((request) => request(this.axios, this.basePath));
    }
}
