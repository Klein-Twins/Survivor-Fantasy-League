/* tslint:disable */
/* eslint-disable */
/**
 * Survivor Fantasy League - OpenAPI 3.0.3
 * This is the Survivor Fantasy League Spec for API's
 *
 * OpenAPI spec version: 1.0.11
 * Contact: pklein111697@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiError } from '../models';
import { Image } from '../models';
/**
 * ImageServiceApi - axios parameter creator
 * @export
 */
export const ImageServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to retrieve an episode image by episode ID.
         * @summary Retrieve episode image
         * @param {string} episodeId The ID of the episode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeImage: async (episodeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episodeId' is not null or undefined
            if (episodeId === null || episodeId === undefined) {
                throw new RequiredError('episodeId','Required parameter episodeId was null or undefined when calling getEpisodeImage.');
            }
            const localVarPath = `/api/image/episode/{episodeId}`
                .replace(`{${"episodeId"}}`, encodeURIComponent(String(episodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a profile image by league ID.
         * @summary Retrieve league image
         * @param {string} leagueId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeagueImage: async (leagueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leagueId' is not null or undefined
            if (leagueId === null || leagueId === undefined) {
                throw new RequiredError('leagueId','Required parameter leagueId was null or undefined when calling getLeagueImage.');
            }
            const localVarPath = `/api/image/league/{leagueId}`
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a profile image by profile ID.
         * @summary Retrieve profile image
         * @param {string} profileId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileImage: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling getProfileImage.');
            }
            const localVarPath = `/api/image/profile/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a season logo image by season id.
         * @summary Retrieve season logo image
         * @param {string} seasonId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeasonLogoImage: async (seasonId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling getSeasonLogoImage.');
            }
            const localVarPath = `/api/image/season/{seasonId}`
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a survivor image by survivor ID.
         * @summary Retrieve survivor image
         * @param {string} survivorId The ID of the survivor.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurvivorImage: async (survivorId: string, seasonId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'survivorId' is not null or undefined
            if (survivorId === null || survivorId === undefined) {
                throw new RequiredError('survivorId','Required parameter survivorId was null or undefined when calling getSurvivorImage.');
            }
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling getSurvivorImage.');
            }
            const localVarPath = `/api/image/survivor/{seasonId}/{survivorId}`
                .replace(`{${"survivorId"}}`, encodeURIComponent(String(survivorId)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a tribe image by tribe ID.
         * @summary Retrieve tribe image
         * @param {string} tribeId The ID of the tribe.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTribeImage: async (tribeId: string, seasonId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tribeId' is not null or undefined
            if (tribeId === null || tribeId === undefined) {
                throw new RequiredError('tribeId','Required parameter tribeId was null or undefined when calling getTribeImage.');
            }
            // verify required parameter 'seasonId' is not null or undefined
            if (seasonId === null || seasonId === undefined) {
                throw new RequiredError('seasonId','Required parameter seasonId was null or undefined when calling getTribeImage.');
            }
            const localVarPath = `/api/image/tribe/{seasonId}/{tribeId}`
                .replace(`{${"tribeId"}}`, encodeURIComponent(String(tribeId)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageServiceApi - functional programming interface
 * @export
 */
export const ImageServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to retrieve an episode image by episode ID.
         * @summary Retrieve episode image
         * @param {string} episodeId The ID of the episode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeImage(episodeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getEpisodeImage(episodeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint allows you to retrieve a profile image by league ID.
         * @summary Retrieve league image
         * @param {string} leagueId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeagueImage(leagueId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getLeagueImage(leagueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint allows you to retrieve a profile image by profile ID.
         * @summary Retrieve profile image
         * @param {string} profileId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileImage(profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getProfileImage(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint allows you to retrieve a season logo image by season id.
         * @summary Retrieve season logo image
         * @param {string} seasonId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonLogoImage(seasonId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getSeasonLogoImage(seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint allows you to retrieve a survivor image by survivor ID.
         * @summary Retrieve survivor image
         * @param {string} survivorId The ID of the survivor.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurvivorImage(survivorId: string, seasonId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getSurvivorImage(survivorId, seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint allows you to retrieve a tribe image by tribe ID.
         * @summary Retrieve tribe image
         * @param {string} tribeId The ID of the tribe.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTribeImage(tribeId: string, seasonId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Image>>> {
            const localVarAxiosArgs = await ImageServiceApiAxiosParamCreator(configuration).getTribeImage(tribeId, seasonId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImageServiceApi - factory interface
 * @export
 */
export const ImageServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint allows you to retrieve an episode image by episode ID.
         * @summary Retrieve episode image
         * @param {string} episodeId The ID of the episode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeImage(episodeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getEpisodeImage(episodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a profile image by league ID.
         * @summary Retrieve league image
         * @param {string} leagueId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeagueImage(leagueId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getLeagueImage(leagueId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a profile image by profile ID.
         * @summary Retrieve profile image
         * @param {string} profileId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileImage(profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getProfileImage(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a season logo image by season id.
         * @summary Retrieve season logo image
         * @param {string} seasonId The ID of the profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeasonLogoImage(seasonId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getSeasonLogoImage(seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a survivor image by survivor ID.
         * @summary Retrieve survivor image
         * @param {string} survivorId The ID of the survivor.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurvivorImage(survivorId: string, seasonId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getSurvivorImage(survivorId, seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a tribe image by tribe ID.
         * @summary Retrieve tribe image
         * @param {string} tribeId The ID of the tribe.
         * @param {string} seasonId The ID of the season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTribeImage(tribeId: string, seasonId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Image>> {
            return ImageServiceApiFp(configuration).getTribeImage(tribeId, seasonId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageServiceApi - object-oriented interface
 * @export
 * @class ImageServiceApi
 * @extends {BaseAPI}
 */
export class ImageServiceApi extends BaseAPI {
    /**
     * This endpoint allows you to retrieve an episode image by episode ID.
     * @summary Retrieve episode image
     * @param {string} episodeId The ID of the episode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getEpisodeImage(episodeId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getEpisodeImage(episodeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to retrieve a profile image by league ID.
     * @summary Retrieve league image
     * @param {string} leagueId The ID of the profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getLeagueImage(leagueId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getLeagueImage(leagueId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to retrieve a profile image by profile ID.
     * @summary Retrieve profile image
     * @param {string} profileId The ID of the profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getProfileImage(profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getProfileImage(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to retrieve a season logo image by season id.
     * @summary Retrieve season logo image
     * @param {string} seasonId The ID of the profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getSeasonLogoImage(seasonId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getSeasonLogoImage(seasonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to retrieve a survivor image by survivor ID.
     * @summary Retrieve survivor image
     * @param {string} survivorId The ID of the survivor.
     * @param {string} seasonId The ID of the season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getSurvivorImage(survivorId: string, seasonId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getSurvivorImage(survivorId, seasonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint allows you to retrieve a tribe image by tribe ID.
     * @summary Retrieve tribe image
     * @param {string} tribeId The ID of the tribe.
     * @param {string} seasonId The ID of the season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageServiceApi
     */
    public async getTribeImage(tribeId: string, seasonId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Image>> {
        return ImageServiceApiFp(this.configuration).getTribeImage(tribeId, seasonId, options).then((request) => request(this.axios, this.basePath));
    }
}
